<?xml version="1.0"?>

<tool name="MutCount" id="mutcount" version="2.1.1">
    <description>
        This tool proceeds to count codons, amino acids on each species of a set of species, and then proceeds to permutation tests.
    </description>

    <macros>
        <import>macros.xml</import>
    </macros>

    <requirements>
        <expand macro="python_required" />
        <requirement type="package" version="0.20.0">pandas</requirement>
        <requirement type="package" version="1.12.0">numpy</requirement>
        <requirement type="package" version="3.4.3">r</requirement>
    </requirements>

    <command>
    <![CDATA[
    
        ln -s $__tool_directory__/scripts/functions.py . &&
        
        #if str($method.method_run) == "concat" :            
            python '$__tool_directory__/scripts/S01a_codons_counting.py' ${method.concat_nuc} '$method.list_species' '$method.list_species_boot' $method.num_iter $method.num_sampled > ${log}
        #end if
        
        #if str($method.method_run) == "separated" :
            mkdir 01_input_files &&
            ln -s '$__tool_directory__/scripts/S03b_sign_test_binomial.R' . &&
            #for $input in $method.sep_file
                ln -s '$input' '01_input_files/$input.element_identifier';                
            #end for

            #if str($method.format_run)== "nucleic" :
                python '$__tool_directory__/scripts/S01b_extract_variable_nuc.py' ${method.sps_list} &&
            #end if

            #if str($method.format_run)== "proteic" :
                cp '$__tool_directory__/scripts/amino_acid_properties.csv' . &&
                python '$__tool_directory__/scripts/S01b_extract_variable_prot.py' ${method.sps_list} amino_acid_properties.csv &&          
            #end if

            python '$__tool_directory__/scripts/S02b_extreme_2states.py' ${method.sps_gp1} ${method.sps_gp2} ${method.format_run}
        #end if
        
    ]]>
    </command>

    <inputs>
        <conditional name="method">
            <param name="method_run" type="select" label="Which method do you want to use for this tool? ">
                <option value="concat">Concatenated genes in DNA (concatenation from RAxML run)</option>
                <option value="separated">Set of separated genes (from ORF_Search output "output zip containing files with CDS without indel")</option>
            </param>

            <when value="concat">
                <param name="concat_nuc" type="data" format="fasta" label="Choose your fasta file in nucleic format" help="It must contain the concatenated file in NUCLEIC format from Phylogeny tool" />
                <param name="list_species" type="text" size="100" label="List of species for countings" help="List the species separated with a comma (for e.g Ap,As,Ct,Gt,Yu)" />
                <param name="list_species_boot" type="text" size="100" label="List of species used for resampling" help="List the species separated with a comma (for e.g Ap,As,Ct,Gt,Yu)" />
                <param name="num_iter" type="integer" value="1000" min="0" label="Number of sampled codons" help="Sets the length (in codons) of the resampled sequences"/>
                <param name="num_sampled" type="integer" value="1000" min="0" label="Number of iterations" help="Sets the number of resampled sequences"/>
            </when>

            <when value="separated">
                <param name="format_run" type="select" label="Which format do you want to use for this tool (concatenation and RAxML run) ? ">
                    <option value="nucleic">Nucleic format</option>
                    <option value="proteic">Proteic format</option>
                </param>
                <param name="sep_file" type="data" format="fasta" multiple="true" label="Choose fasta files" help="Fasta files from ORF_search tool ; in nucleic or proteic, according to the format chosen above" />
                <param name="sps_list" type="text" size="100" label="Enter all the studied species" help="Enter all the species present in the set of fasta files (comma-separated abbreviated names)" />               
                <param name="sps_gp1" type="text" size="100" label="Species for group one" help="Specify species (comma-separated abbreviated names) sharing an ecological condition"/>
                <param name="sps_gp2" type="text" size="100" label="Species for group two" help="Specify species (comma-separated abbreviated names) sharing an other ecological condition"/>            
            </when>
        </conditional>
    </inputs>

    <outputs>
        <!-- output concat -->
        <data format="txt" name="log" label="MutCount_concat_log.output" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="codons_freqs" label="codons_freqs.csv" from_work_dir="codons_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="aa_freqs" label="aa_freqs.csv" from_work_dir="aa_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="aatypes_freqs" label="aatypes_freqs.csv" from_work_dir="aatypes_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="gc_and_others_freqs" label="gc_and_others_freqs.csv" from_work_dir="gc_and_others_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="codons_transitions_freqs" label="codons_transitions_freqs" from_work_dir="codons_transitions_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="aa_transitions_freqs" label="aa_transitions_freqs.csv" from_work_dir="aa_transitions_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>
        <data format="csv" name="aatypes_transitions_freqs" label="aatypes_transitions.csv" from_work_dir="aatypes_transitions_freqs.csv" >
            <filter>(method['method_run']=='concat')</filter>
        </data>

        <!-- outputs separated - nucleic -->
        <collection name="tables_nuc" type="list" label="counts_on_nucleotides">
            <discover_datasets pattern="__name_and_ext__" directory="02_tables_per_nucleotide" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'nucleic')</filter>
        </collection>
        <collection name="tables_nuc_var" type="list" label="counts_on_nuc_variables">
            <discover_datasets pattern="__name_and_ext__" directory="02_tables_per_nuc_variable" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'nucleic')</filter>
        </collection>
        <collection name="outputs_nuc" type="list" label="binomial_tests_on_nucleotides">
            <discover_datasets pattern="__name_and_ext__" directory="04_outputs_nucleotides" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'nucleic')</filter>
        </collection>
        <collection name="outputs_nuc_var" type="list" label="binomial_tests_on_nuc_variables">
            <discover_datasets pattern="__name_and_ext__" directory="04_outputs_nuc_variables" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'nucleic')</filter>
        </collection>

        <!-- outputs separated - proteic -->
        <collection name="tables_aa" type="list" label="counts_on_amino_acids">
            <discover_datasets pattern="__name_and_ext__" directory="02_tables_per_aa" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'proteic')</filter>
        </collection>
        <collection name="tables_variables" type="list" label="counts_on_indices">
            <discover_datasets pattern="__name_and_ext__" directory="02_tables_per_aa_variable" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'proteic')</filter>
        </collection>
        <collection name="outputs_aa" type="list" label="binomial_tests_on_amino_acids">
            <discover_datasets pattern="__name_and_ext__" directory="04_outputs_aa" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'proteic')</filter>
        </collection>
        <collection name="outputs_variables" type="list" label="binomial_tests_on_indices">
            <discover_datasets pattern="__name_and_ext__" directory="04_outputs_aa_variables" />
            <filter>(method['method_run']=='separated' and method['format_run']== 'proteic')</filter>
        </collection>
    </outputs>

    <tests>
        <test>
            <conditional name="method" >
                <param name="method_run" value="concat" />
                <param name="concat_nuc" ftype="fasta" value="concatenation.fasta" />
                <param name="list_species" ftype="text" value="Ps,Pp,Pu,Ac,Ap,Pf,Pg,Ph,Pi" />
                <param name="list_species_boot" ftype="text" value="Ps,Pp,Pu,Pf" />
                <param name="num_iter" value="200" />
                <param name="num_sampled" value="200" /> 
            </conditional>
            <output name="log" value="OUT_concat/MutCount_concat_log.output" lines_diff="2"/>
            <output name="codons_freqs" value="OUT_concat/codons_freqs.csv" lines_diff="18"/>
            <output name="aa_freqs" value="OUT_concat/aa_freqs.csv" lines_diff="18"/>
            <output name="aatypes_freqs" value="OUT_concat/aatypes_freqs.csv" lines_diff="18"/>
            <output name="gc_and_others_freqs" value="OUT_concat/gc_and_others_freqs.csv"/>            
            <output name="codons_transitions_freqs" value="OUT_concat/codons_transitions_freqs.csv" lines_diff="72"/>
            <output name="aa_transitions_freqs" value="OUT_concat/aa_transitions_freqs.csv" lines_diff="72"/>
            <output name="aatypes_transitions_freqs" value="OUT_concat/aatypes_transitions_freqs.csv" lines_diff="72"/>
        </test>
        
        <test>
            <conditional name="method" >
                <param name="method_run" value="separated" />
                <param name="format_run" value="nucleic" />
                <param name="sep_file" ftype="fasta" value="sep_nuc/orthogroup_109_with_3_species.fasta,sep_nuc/orthogroup_113_with_4_species.fasta,sep_nuc/orthogroup_253_with_2_species.fasta,sep_nuc/orthogroup_283_with_2_species.fasta,sep_nuc/orthogroup_299_with_2_species.fasta,sep_nuc/orthogroup_301_with_4_species.fasta,sep_nuc/orthogroup_316_with_4_species.fasta,sep_nuc/orthogroup_335_with_4_species.fasta,sep_nuc/orthogroup_343_with_4_species.fasta,sep_nuc/orthogroup_368_with_4_species.fasta,sep_nuc/orthogroup_404_with_4_species.fasta,sep_nuc/orthogroup_442_with_4_species.fasta,sep_nuc/orthogroup_487_with_4_species.fasta,sep_nuc/orthogroup_508_with_4_species.fasta,sep_nuc/orthogroup_544_with_4_species.fasta,sep_nuc/orthogroup_546_with_4_species.fasta,sep_nuc/orthogroup_588_with_4_species.fasta,sep_nuc/orthogroup_623_with_4_species.fasta,sep_nuc/orthogroup_651_with_4_species.fasta,sep_nuc/orthogroup_660_with_4_species.fasta,sep_nuc/orthogroup_696_with_4_species.fasta,sep_nuc/orthogroup_707_with_4_species.fasta,sep_nuc/orthogroup_727_with_4_species.fasta,sep_nuc/orthogroup_761_with_4_species.fasta" />
                <param name="sps_list" value="Ha,Lf,Bs,Bj" />
                <param name="sps_gp1" value="Ha,Lf" />
                <param name="sps_gp2" value="Bs,Bj" />
            </conditional>
            <output_collection name="tables_nuc" type="list">
                <element name="A" value="02_tables_per_nucleotide/A.csv" />
                <element name="C" value="02_tables_per_nucleotide/C.csv" />
                <element name="G" value="02_tables_per_nucleotide/G.csv" />
                <element name="T" value="02_tables_per_nucleotide/T.csv" />
            </output_collection>
            <output_collection name="tables_nuc_var" type="list">
                <element name="purine_percent" value="02_tables_per_nuc_variable/purine_percent.csv" />
                <element name="GC_percent" value="02_tables_per_nuc_variable/_GC_percent.csv" />
                <element name="DIFF_GC" value="02_tables_per_nuc_variable/DIFF_GC.csv" />
                <element name="DIFF_AT" value="02_tables_per_nuc_variable/DIFF_AT.csv" />
                <element name="PLI_GC" value="02_tables_per_nuc_variable/PLI_GC.csv" />
                <element name="PLI_AT" value="02_tables_per_nuc_variable/PLI_AT.csv"  />
                <element name="PLI_GC_1000" value="02_tables_per_nuc_variable/PLI_GC_1000.csv" />
                <element name="PLI_AT_1000" value="02_tables_per_nuc_variable/PLI_AT_1000.csv" />
            </output_collection>
            <output_collection name="outputs_nuc" type="list">
                <element name="A" value="04_outputs_nucleotides/A.csv" />
                <element name="C" value="04_outputs_nucleotides/C.csv" />
                <element name="G" value="04_outputs_nucleotides/G.csv" />
                <element name="T" value="04_outputs_nucleotides/T.csv" />
            </output_collection>
            <output_collection name="outputs_nuc_var" type="list">
                <element name="purine_percent" value="04_outputs_nuc_variables/purine_percent.csv" />
                <element name="GC_percent" value="04_outputs_nuc_variables/GC_percent.csv" />
                <element name="DIFF_GC" value="04_outputs_nuc_variables/DIFF_GC.csv" />
                <element name="DIFF_AT" value="04_outputs_nuc_variables/DIFF_AT.csv" />
                <element name="PLI_GC" value="04_outputs_nuc_variables/PLI_GC.csv" />
                <element name="PLI_AT" value="04_outputs_nuc_variables/PLI_AT.csv" />
                <element name="PLI_GC_1000" value="04_outputs_nuc_variables/PLI_GC_1000.csv" />
                <element name="PLI_AT_1000" value="04_outputs_nuc_variables/PLI_AT_1000.csv" />
            </output_collection>
        </test>

        <test>
            <conditional name="method" >
                <param name="method_run" value="separated" />
                <param name="format_run" value="proteic" />
                <param name="sep_file" ftype="fasta" value="sep_aa/locus_3sp_2.fasta,sep_aa/locus_3sp_7.fasta,sep_aa/locus_4sp_4.fasta,sep_aa/locus_4sp_6.fasta,sep_aa/locus_6sp_10.fasta,sep_aa/locus_6sp_11.fasta,sep_aa/locus_6sp_16.fasta,sep_aa/locus_6sp_18.fasta,sep_aa/locus_6sp_25.fasta,sep_aa/locus_6sp_27.fasta,sep_aa/locus_6sp_30.fasta,sep_aa/locus_6sp_32.fasta,sep_aa/locus_6sp_35.fasta,sep_aa/locus_6sp_38.fasta,sep_aa/locus_6sp_39.fasta,sep_aa/locus_6sp_40.fasta,sep_aa/locus_6sp_41.fasta,sep_aa/locus_6sp_46.fasta,sep_aa/locus_6sp_47.fasta,sep_aa/locus_6sp_50.fasta,sep_aa/locus_6sp_53.fasta,sep_aa/locus_6sp_57.fasta,sep_aa/locus_6sp_58.fasta,sep_aa/locus_6sp_60.fasta" />
                <param name="sps_list" value="Ps,Pp,Pf,Ac,Pg,Ap" />
                <param name="sps_gp1" value="Pp,Pg" />
                <param name="sps_gp2" value="Ap,Ps" />
            </conditional>
            <output_collection name="tables_aa" type="list">
                <element name="A" value="02_tables_per_aa/A.csv" />
                <element name="C" value="02_tables_per_aa/C.csv" />
                <element name="D" value="02_tables_per_aa/D.csv" />
                <element name="E" value="02_tables_per_aa/E.csv" />
                <element name="F" value="02_tables_per_aa/F.csv" />
                <element name="G" value="02_tables_per_aa/G.csv" />
                <element name="H" value="02_tables_per_aa/H.csv" />
                <element name="I" value="02_tables_per_aa/I.csv" />
                <element name="K" value="02_tables_per_aa/K.csv" />
                <element name="L" value="02_tables_per_aa/L.csv" />
                <element name="M" value="02_tables_per_aa/M.csv" />
                <element name="N" value="02_tables_per_aa/N.csv" />
                <element name="P" value="02_tables_per_aa/P.csv" />
                <element name="Q" value="02_tables_per_aa/Q.csv" />
                <element name="R" value="02_tables_per_aa/R.csv" />
                <element name="S" value="02_tables_per_aa/S.csv" />
                <element name="T" value="02_tables_per_aa/T.csv" />
                <element name="V" value="02_tables_per_aa/V.csv" />
                <element name="W" value="02_tables_per_aa/W.csv" />
                <element name="Y" value="02_tables_per_aa/Y.csv" />
            </output_collection>
            <output_collection name="tables_variables" type="list">
                <element name="AC" value="02_tables_per_aa_variable/AC.csv" />
                <element name="APGC" value="02_tables_per_aa_variable/APGC.csv" />
                <element name="AVLIMFYW" value="02_tables_per_aa_variable/AVLIMFYW.csv" />
                <element name="DE" value="02_tables_per_aa_variable/DE.csv" />
                <element name="DNQTSHA" value="02_tables_per_aa_variable/DNQTSHA.csv" />
                <element name="EK" value="02_tables_per_aa_variable/EK.csv" />
                <element name="ERK" value="02_tables_per_aa_variable/ERK.csv" />
                <element name="FYMINK" value="02_tables_per_aa_variable/FYMINK.csv" />
                <element name="FYW" value="02_tables_per_aa_variable/FYW.csv" />
                <element name="GARP" value="02_tables_per_aa_variable/GARP.csv" />
                <element name="IVYWREL" value="02_tables_per_aa_variable/IVYWREL.csv" />
                <element name="QH" value="02_tables_per_aa_variable/QH.csv" />
                <element name="ratio_AC_VLIM" value="02_tables_per_aa_variable/ratio_AC_VLIM.csv" />
                <element name="ratio_APGC_VLIM" value="02_tables_per_aa_variable/ratio_APGC_VLIM.csv" />
                <element name="ratio_EK_QH" value="02_tables_per_aa_variable/ratio_EK_QH.csv" />
                <element name="ratio_ERK_DNQTSHA" value="02_tables_per_aa_variable/ratio_ERK_DNQTSHA.csv" />
                <element name="ratio_GARP_FYMINK" value="02_tables_per_aa_variable/ratio_GARP_FYMINK.csv" />
                <element name="RHK" value="02_tables_per_aa_variable/RHK.csv" />
                <element name="RHKDE" value="02_tables_per_aa_variable/RHKDE.csv" />
                <element name="STNQ" value="02_tables_per_aa_variable/STNQ.csv" />
                <element name="VLIM" value="02_tables_per_aa_variable/VLIM.csv" />
                <element name="AVLIM" value="02_tables_per_aa_variable/AVLIM.csv" />
                <element name="total_hydratation" value="02_tables_per_aa_variable/total_hydratation.csv" />
                <element name="total_partial_specific_volume" value="02_tables_per_aa_variable/total_partial_specific_volume.csv" />
                <element name="total_residue_volume" value="02_tables_per_aa_variable/total_residue_volume.csv" />
                <element name="total_residue_weight" value="02_tables_per_aa_variable/total_residue_weight.csv" />
            </output_collection>
            <output_collection name="outputs_aa" type="list">
                <element name="A" value="04_outputs_aa/A.csv" />
                <element name="C" value="04_outputs_aa/C.csv" />
                <element name="D" value="04_outputs_aa/D.csv" />
                <element name="E" value="04_outputs_aa/E.csv" />
                <element name="F" value="04_outputs_aa/F.csv" />
                <element name="G" value="04_outputs_aa/G.csv" />
                <element name="H" value="04_outputs_aa/H.csv" />
                <element name="I" value="04_outputs_aa/I.csv" />
                <element name="K" value="04_outputs_aa/K.csv" />
                <element name="L" value="04_outputs_aa/L.csv" />
                <element name="M" value="04_outputs_aa/M.csv" />
                <element name="N" value="04_outputs_aa/N.csv" />
                <element name="P" value="04_outputs_aa/P.csv" />
                <element name="Q" value="04_outputs_aa/Q.csv" />
                <element name="R" value="04_outputs_aa/R.csv" />
                <element name="S" value="04_outputs_aa/S.csv" />
                <element name="T" value="04_outputs_aa/T.csv" />
                <element name="V" value="04_outputs_aa/V.csv" />
                <element name="W" value="04_outputs_aa/W.csv" />
                <element name="Y" value="04_outputs_aa/Y.csv" />
            </output_collection>
            <output_collection name="outputs_variables" type="list">
                <element name="AC" value="04_outputs_aa_variables/AC.csv" />
                <element name="APGC" value="04_outputs_aa_variables/APGC.csv" />
                <element name="AVLIMFYW" value="04_outputs_aa_variables/AVLIMFYW.csv" />
                <element name="DE" value="04_outputs_aa_variables/DE.csv" />
                <element name="DNQTSHA" value="04_outputs_aa_variables/DNQTSHA.csv" />
                <element name="EK" value="04_outputs_aa_variables/EK.csv" />
                <element name="ERK" value="04_outputs_aa_variables/ERK.csv" />
                <element name="FYMINK" value="04_outputs_aa_variables/FYMINK.csv"  />
                <element name="FYW" value="04_outputs_aa_variables/FYW.csv"  />
                <element name="GARP" value="04_outputs_aa_variables/GARP.csv"  />
                <element name="IVYWREL" value="04_outputs_aa_variables/IVYWREL.csv" />
                <element name="QH" value="04_outputs_aa_variables/QH.csv"  />
                <element name="ratio_AC_VLIM" value="04_outputs_aa_variables/ratio_AC_VLIM.csv"  />
                <element name="ratio_APGC_VLIM" value="04_outputs_aa_variables/ratio_APGC_VLIM.csv"  />
                <element name="ratio_EK_QH" value="04_outputs_aa_variables/ratio_EK_QH.csv" />
                <element name="ratio_ERK_DNQTSHA" value="04_outputs_aa_variables/ratio_ERK_DNQTSHA.csv" />
                <element name="ratio_GARP_FYMINK" value="04_outputs_aa_variables/ratio_GARP_FYMINK.csv" />
                <element name="RHK" value="04_outputs_aa_variables/RHK.csv" />
                <element name="RHKDE" value="04_outputs_aa_variables/RHKDE.csv" />
                <element name="STNQ" value="04_outputs_aa_variables/STNQ.csv" />
                <element name="VLIM" value="04_outputs_aa_variables/VLIM.csv" />
                <element name="AVLIM" value="04_outputs_aa_variables/AVLIM.csv" />
                <element name="total_hydratation" value="04_outputs_aa_variables/total_hydratation.csv" />
                <element name="total_partial_specific_volume" value="04_outputs_aa_variables/total_partial_specific_volume.csv" />
                <element name="total_residue_volume" value="04_outputs_aa_variables/total_residue_volume.csv" />
                <element name="total_residue_weight" value="04_outputs_aa_variables/total_residue_weight.csv" />
            </output_collection>
        </test>
    </tests>

    <help>

@HELP_AUTHORS@

<![CDATA[

**Last Version** : Victor Mataigne and Gildas Le Corguillé

--------

**Description**

This script counts the number of codons, amino acids, and types of amino acids in sequences, as well as the mutation bias from one item to another between 2 sequences. Counting is then compared to empirical p-values, obtained from bootstrapped sequences obtained from a subset of sequences.
    
In the output files, the pvalues indicate the position of the observed data in a distribution of empirical countings obtained from a resample of the data. Values above 0.95 indicate a significantly higher counting, values under 0.05 a significantly lower counting.

The script resamples random pairs of aligned codon to determine what countings can be expected under the hypothesis of an homogenous dataset.
Countings are performed on each generated random alignement, thousands of alignments allow to draw a gaussian distribution of the countings.
Then the script simply checks whether the observed data are within the 5% lowest or 5% highest values of the distribution.

--------

.. class:: infomark

**Input files**

If you choose the concatenated method, the input file is the concatenated genes fasta file (in nucleic format) from a previous run of the toolConcatPhyl.

If you choose the separated method, there are two input files :
- A dataset collection containing output files from the CDS_Search tool, the one without indels. These files must be in nucleic or proteic format according to the format chosen along with the method.
- The concatenated genes fasta file from ConcatPhyl, only used here to retrieve species name.

--------

**Parameters**

There are parameters only for the "Concatenated" method :

- The list of species for **countings**, separated by commas and without space (e.g : sp1,sp2,sp3,sp4). You can run the tool on subgroup of species, not only on the total number of species present in the previous tools.

- The list of species for **resampling**, separated by commas and without space (e.g : sp1,sp2,sp3,sp4). You can run the tool on subgroup of species, not only on the total number of species present in the previous tools. 

- The number of iterations : the number of alignments that will be generated (effect on the resolution of the gaussian distribution). Shouldn't be lower than 1000 to have a relatively smooth gaussian distribution.

- The number of sampled codons : the number of pairs of codons in each generated alignments (effect on the robustness on the countings performed on this alignement). Shouldn't be lower than 1000 to detect codons with relatively low occurence (<1%).

--------

**Outputs**

Many outputs in .csv format , varying according to the chosen method and format (separated, nucleic ...)
    - When method = concat : 6 .csv outputs : countings of codons, amino acids, amino acids types, and transitions from amino acid to amino acid and from amino acid type to amino acid type.
    - When method = separated and format = nucleic : 4 .csv outputs : nucleotide composition, GC percent, purine percent, purine load indice.
    - When method = separated and format = proteic : 13 .csv outputs : protein composition, several files of countings various AA combinations, results on residues, hydratation, partial specific volume.

---------

**The AdaptSearch Pipeline**

.. image:: adaptsearch_picture_helps.png

---------

Changelog
---------

**Version 2.2 - 10/07/2018**
- Updated separated mode : added a binomial sign test

**Version 2.1 - 26/02/2017**
- Fully re-written the concat method : fixed mistakes + cleaner code
- Splitted output of concatenated method in several csv files.
- Bug corrected in output files of separated method.

**Version 2.0 - 12/07/2017**

- NEW: Replaced the zip between tools by Dataset Collection
- More functional tests

**Version 1.0 - 14/04/2017**
   
- Added the tools to the suite
- Added a functional test with planemo
- Planemo test using conda dependencies for python
- Scripts renamed + symlinks to the directory 'scripts'

    ]]>

    </help>
    
    <expand macro="citations" />

</tool>
