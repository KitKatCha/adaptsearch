<tool name="POGs" id="POGs" version="2.0">

	<description>
		Find orthologous groups
	</description>

	<macros>
		<import>macros.xml</import>
	</macros>

	<requirements>
		<expand macro="python_required" />
        <requirement type="package" version="0.20.0">pandas</requirement>
        <requirement type="package" version="1.12.0">numpy</requirement>
	</requirements>

  	<command>
	<![CDATA[
        #set $infiles_from_paiwise_prot = ""
        #for $input_from_paiwise_prot in $inputs_from_paiwise_prot
            ln -s '$input_from_paiwise_prot' '$input_from_paiwise_prot.element_identifier';
            #set $infiles_from_paiwise_prot = $infiles_from_paiwise_prot + $input_from_paiwise_prot.element_identifier + ","
        #end for
        #set $infiles_from_paiwise_prot = $infiles_from_paiwise_prot[:-1]

		python '$__tool_directory__/scripts/pogs.py' '$infiles_from_paiwise_prot' '$minspec' 
        
        #if '$verbose':
            -v
        #end if
        #if '$paralogs':
            -p
        #end if

        > ${log}

	]]>
  	</command>

 	<inputs>
        <param name="inputs_from_paiwise_prot" type="data" format="fasta" multiple="true" label="Input files from Pairwise Prot" />
		<param name="minspec" type="integer" value="3" label="Drop orthogroups with less than n species" />	
        <param name="verbose" type="boolean" checked="True" truevalue="T" falsevalue="F" label="Verbose" help="Display a summary table of orthogroups before paralogs filtering"/>
        <param name="paralogs" type="boolean" checked="False" truevalue="T" falsevalue="F" label="Paralogs" help="Return also orthogroups without paralogs filtering"/>
	</inputs>

	<outputs>
		<data format="txt" name="log" label="pogs.output" />
        <collection name="output" type="list" label="POGs_unaligned">
            <discover_datasets pattern="__name_and_ext__" directory="outputs" />
        </collection>
        <collection name="outputPara" type="list" label="POGs_withParalogs_unaligned">
            <discover_datasets pattern="__name_and_ext__" directory="outputs_withParalogs" />
            <filter>paralogs == True</filter>
        </collection>
	</outputs>

	<tests>
		<test>
            <param name="inputs_from_paiwise_prot" ftype="fasta" value="output_pairwise/RBH_AmAmphi_AcAcaud.fasta,output_pairwise/RBH_ApApomp_AcAcaud.fasta,output_pairwise/RBH_ApApomp_AmAmphi.fasta,output_pairwise/RBH_TeTerlap_AcAcaud.fasta,output_pairwise/RBH_TeTerlap_AmAmphi.fasta,output_pairwise/RBH_TeTerlap_ApApomp.fasta"/>
			<param name="minspec" value="3"/>
            <param name="verbose" value="True"/>
            <param name="paralogs" value="True"/>
			<output name="log" value="pogs.output" />
            <output_collection name="output" type="list">
                <element name="orthogroup_1_with_4_sequences" value="outputs/orthogroup_1_with_4_sequences.fasta" />
                <element name="orthogroup_2_with_4_sequences" value="outputs/orthogroup_2_with_4_sequences.fasta" />
                <element name="orthogroup_3_with_3_sequences" value="outputs/orthogroup_3_with_3_sequences.fasta" />
                <element name="orthogroup_4_with_4_sequences" value="outputs/orthogroup_4_with_4_sequences.fasta" />
                <element name="orthogroup_5_with_3_sequences" value="outputs/orthogroup_5_with_3_sequences.fasta" />
                <element name="orthogroup_6_with_4_sequences" value="outputs/orthogroup_6_with_4_sequences.fasta" />
                <element name="orthogroup_7_with_3_sequences" value="outputs/orthogroup_7_with_3_sequences.fasta" />
                <element name="orthogroup_8_with_3_sequences" value="outputs/orthogroup_8_with_3_sequences.fasta" />
                <element name="orthogroup_9_with_3_sequences" value="outputs/orthogroup_9_with_3_sequences.fasta" />
                <element name="orthogroup_10_with_4_sequences" value="outputs/orthogroup_10_with_4_sequences.fasta" />
            </output_collection>
            <output_collection name="outputPara" type="list">
                <element name="orthogroup_1_with_10_sequences" value="outputs_withParalogs/orthogroup_1_with_10_sequences.fasta" />
                <element name="orthogroup_2_with_5_sequences" value="outputs_withParalogs/orthogroup_2_with_5_sequences.fasta" />
                <element name="orthogroup_3_with_3_sequences" value="outputs_withParalogs/orthogroup_3_with_3_sequences.fasta" />
                <element name="orthogroup_4_with_7_sequences" value="outputs_withParalogs/orthogroup_4_with_7_sequences.fasta" />
                <element name="orthogroup_5_with_3_sequences" value="outputs_withParalogs/orthogroup_5_with_3_sequences.fasta" />
                <element name="orthogroup_6_with_4_sequences" value="outputs_withParalogs/orthogroup_6_with_4_sequences.fasta" />
                <element name="orthogroup_7_with_3_sequences" value="outputs_withParalogs/orthogroup_7_with_3_sequences.fasta" />
                <element name="orthogroup_8_with_3_sequences" value="outputs_withParalogs/orthogroup_8_with_3_sequences.fasta" />
                <element name="orthogroup_9_with_3_sequences" value="outputs_withParalogs/orthogroup_9_with_3_sequences.fasta" />
                <element name="orthogroup_10_with_5_sequences" value="outputs_withParalogs/orthogroup_10_with_5_sequences.fasta" />
            </output_collection>
		</test>
	</tests>	

	<help>

@HELP_AUTHORS@

============
What it does
============

| This tool parses homologous sequences obtained by pairwise and gather sequences into groups of orthologous sequences.

--------

======
Inputs
======
| A dataset collection with the the pairwise with the homologous sequences (obtained from the tool "Pairwise").

--------

=======
Outputs
=======

This tool, produces the following files :

**POGs** :

| is the general output. It gives the number of sequences at each filtering step and then count
| the number of groups.

**POGs_locus_orthologs_unaligned** :

| is the output which contains the groups of orthologous sequences,
| one file corresponding to one group.

the sequences of each group are in nucleic format.

Changelog
---------

**Version 2.1 - 04/01/2018**

  - Rewritten with improved results and better code

**Version 2.0 - 11/07/2017**

 - Replace the zip between tools by Dataset Collection
 - Add option : paralogs filtering
 - Added a second functional test (to test the new option)
 - Code factoring
 - Removed zip format of input and output files ; replaced by dataset collections


**Version 1.0 - 13/04/2017**

 - TEST: Add funtional test with planemo
 - IMPROVEMENT: Use conda dependencies for python

	</help>

	<expand macro="citations" />

</tool>
